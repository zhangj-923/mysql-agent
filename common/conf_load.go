package common

import (
	"encoding/json"
	"io/ioutil"
	"sync"
)

type PParameter struct {
	ConnectionUtilization float64 `json:"connection_utilization"`  //连接使用率(%)  (当前连接数/最大连接数) *100%
	CreatedTmpTables      int     `json:"created_tmp_tables"`      //临时表数量
	SlowQueries           int     `json:"slow_queries"`            //慢查询数
	ThreadsConnected      int     `json:"threads_connected"`       //当前连接数
	ThreadsRunning        int     `json:"threads_running"`         //并发请求数量
	TmpTablesUtilization  float64 `json:"tmp_tables_utilization"`  //临时表使用率(%)    (建立在磁盘上的临时表的数据量/临时表数量) *100%
	MaxConnections        int     `json:"max_connections"`         //最大连接数
	CreatedTmpDiskTables  int     `json:"created_tmp_disk_tables"` //建立在磁盘上的临时表的数据量
}

type CommitTotal struct {
	ComDelete int     `json:"com_delete"` //delete(次/秒)
	ComInsert int     `json:"com_insert"` //insert(次/秒)
	ComReads  int     `json:"com_reads"`  //reads(次/秒)
	ComSelect int     `json:"com_select"` //select(次/秒)
	ComUpdate int     `json:"com_update"` //update(次/秒)
	ComWrites int     `json:"com_writes"` //writes(次/秒)
	Monitor   Monitor `json:"monitor"`    // 性能监控
}

type LockTotal struct {
	TableLocksImmediate int `json:"table_locks_immediate"` //直接锁
	TableLocksWaited    int `json:"table_locks_waited"`    //等待锁
}

type NetworkTatal struct {
	BytesReceived float64 `json:"bytes_received"` //接收流量
	BytesSent     float64 `json:"bytes_sent"`     //发送流量
}

type Pool struct {
	InnodbBufferPoolInstances    int     `json:"innodb_buffer_pool_instances"` //InnoDB缓冲池数量
	InnodbBufferPoolReads        int     `json:"innodb_buffer_pool_reads"`
	InnodbBufferPoolReadRequests int     `json:"innodb_buffer_pool_read_requests"`
	InnodbBufferPoolReadsHit     float64 `json:"innodb_buffer_pool_reads_hit"` //InnoDB读命中率(%)
	InnodbBufferPoolSize         float64 `json:"innodb_buffer_pool_size"`      //InnoDB缓冲池大小(MB)
	InnodbBufferPoolPagesFree    int     `json:"innodb_buffer_pool_pages_free"`
	InnodbBufferPoolPagesTotal   int     `json:"innodb_buffer_pool_pages_total"`
	InnodbBufferPoolUtilization  float64 `json:"innodb_buffer_pool_utilization"` //InnoDB使用率(%)
	KeyBlocksUsed                int     `json:"key_blocks_used"`
	KeyBlocksUnused              int     `json:"key_blocks_unused"`
	KeyBufferSize                float64 `json:"key_buffer_size"`        //MyISAM缓冲池大小(MB)
	KeyBufferUtilization         float64 `json:"key_buffer_utilization"` //MyISAM平均使用率(%)
	KeyReads                     int     `json:"key_reads"`
	KeyReadRequests              int     `json:"key_read_requests"`
	KeyReadsRate                 float64 `json:"key_reads_rate"` //MyISAM平均读命中率(%)
	KeyWrites                    int     `json:"key_writes"`
	KeyWriteRequests             int     `json:"key_write_requests"`
	KeyWritesRate                float64 `json:"key_writes_rate"` //MyISAM平均写命中率(%)
}

type Monitor struct {
	Qps       float64 `json:"qps"`       //每秒查询数
	Tps       float64 `json:"tps"`       //每秒事务数
	Questions int     `json:"questions"` //查询总数
	Commit    int     `json:"commit"`    //提交总数
	Rollback  int     `json:"rollback"`  //回滚总数
}

type Endpoint struct {
	EntityId  int    `json:"entity_id"`
	IpAddress string `json:"ipAddress"`
	Port      int    `json:"port"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	Dbname    string `json:"dbname"`
}

type Mysql struct {
	Username string `json:"username"`
	Password string `json:"password"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Dbname   string `json:"dbname"`
}

type Influxdb struct {
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
	Password string `json:"password"`
	Database string `json:"database"`
}

type AutoGenerated struct {
	IsMock     bool       `json:"isMock"`
	IsEncrypt  bool       `json:"isEncrypt"`
	AgentCycle int        `json:"agentCycle"`
	Endpoint   []Endpoint `json:"endpoint"`
	Mysql      Mysql      `json:"mysql"`
	Influxdb   Influxdb   `json:"influxdb"`
}

type Conf struct {
}

type JsonStruct struct {
}

func NewJsonStruct() *JsonStruct {
	return &JsonStruct{}
}

var AutoGenConf *AutoGenerated

var lock = new(sync.RWMutex)

//json文件读取，filePath文件路径 文件接收
func (*JsonStruct) readfile(filePath string, v interface{}) {
	lock.Lock()
	data, err := ioutil.ReadFile(filePath) //ReadFile函数会读取文件的全部内容，并将结果以[]byte 形式返回
	if err != nil {
		Info.Println(err)
		return
	}
	lock.Unlock()

	err = json.Unmarshal([]byte(data), v)
	if err != nil {
		Info.Println(err)
		return
	}
}

//生成实体全局对象
func (*Conf) GetModel(filePath string) {
	JsonStruct := JsonStruct{}
	q := AutoGenerated{}
	JsonStruct.readfile(filePath, &q)
	AutoGenConf = &q
}

func (*Conf) GetModelClass(filePath string) (a *AutoGenerated) {
	JsonStruct := JsonStruct{}
	q := AutoGenerated{}
	JsonStruct.readfile(filePath, &q)
	return &q
}
